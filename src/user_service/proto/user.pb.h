// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_user_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_user_2eproto;
namespace user {
class GetUserInfoRequest;
struct GetUserInfoRequestDefaultTypeInternal;
extern GetUserInfoRequestDefaultTypeInternal _GetUserInfoRequest_default_instance_;
class GetUserInfoResponse;
struct GetUserInfoResponseDefaultTypeInternal;
extern GetUserInfoResponseDefaultTypeInternal _GetUserInfoResponse_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace user
PROTOBUF_NAMESPACE_OPEN
template <>
::user::GetUserInfoRequest* Arena::CreateMaybeMessage<::user::GetUserInfoRequest>(Arena*);
template <>
::user::GetUserInfoResponse* Arena::CreateMaybeMessage<::user::GetUserInfoResponse>(Arena*);
template <>
::user::UserInfo* Arena::CreateMaybeMessage<::user::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace user {

// ===================================================================


// -------------------------------------------------------------------

class GetUserInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetUserInfoRequest) */ {
 public:
  inline GetUserInfoRequest() : GetUserInfoRequest(nullptr) {}
  ~GetUserInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserInfoRequest(const GetUserInfoRequest& from);
  GetUserInfoRequest(GetUserInfoRequest&& from) noexcept
    : GetUserInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetUserInfoRequest& operator=(const GetUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInfoRequest& operator=(GetUserInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoRequest*>(
               &_GetUserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetUserInfoRequest& a, GetUserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserInfoRequest& from) {
    GetUserInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "user.GetUserInfoRequest";
  }
  protected:
  explicit GetUserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.GetUserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};// -------------------------------------------------------------------

class GetUserInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetUserInfoResponse) */ {
 public:
  inline GetUserInfoResponse() : GetUserInfoResponse(nullptr) {}
  ~GetUserInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserInfoResponse(const GetUserInfoResponse& from);
  GetUserInfoResponse(GetUserInfoResponse&& from) noexcept
    : GetUserInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetUserInfoResponse& operator=(const GetUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInfoResponse& operator=(GetUserInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoResponse*>(
               &_GetUserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetUserInfoResponse& a, GetUserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserInfoResponse& from) {
    GetUserInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "user.GetUserInfoResponse";
  }
  protected:
  explicit GetUserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kUserInfoFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kStatusCodeFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .user.UserInfo user_info = 3;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::user::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::user::UserInfo* release_user_info();
  ::user::UserInfo* mutable_user_info();
  void set_allocated_user_info(::user::UserInfo* user_info);
  private:
  const ::user::UserInfo& _internal_user_info() const;
  ::user::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::user::UserInfo* user_info);
  ::user::UserInfo* unsafe_arena_release_user_info();
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 status_code = 4;
  void clear_status_code() ;
  ::int32_t status_code() const;
  void set_status_code(::int32_t value);

  private:
  ::int32_t _internal_status_code() const;
  void _internal_set_status_code(::int32_t value);

  public:
  // int64 timestamp = 5;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.GetUserInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::user::UserInfo* user_info_;
    bool success_;
    ::int32_t status_code_;
    ::int64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "user.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kStatusFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
    kLastLoginFieldNumber = 6,
    kFullNameFieldNumber = 7,
    kPhoneFieldNumber = 8,
    kAvatarUrlFieldNumber = 9,
    kUserIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string status = 4;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string created_at = 5;
  void clear_created_at() ;
  const std::string& created_at() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* ptr);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // string last_login = 6;
  void clear_last_login() ;
  const std::string& last_login() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_login(Arg_&& arg, Args_... args);
  std::string* mutable_last_login();
  PROTOBUF_NODISCARD std::string* release_last_login();
  void set_allocated_last_login(std::string* ptr);

  private:
  const std::string& _internal_last_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_login(
      const std::string& value);
  std::string* _internal_mutable_last_login();

  public:
  // string full_name = 7;
  void clear_full_name() ;
  const std::string& full_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_name(Arg_&& arg, Args_... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* ptr);

  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(
      const std::string& value);
  std::string* _internal_mutable_full_name();

  public:
  // string phone = 8;
  void clear_phone() ;
  const std::string& phone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone(Arg_&& arg, Args_... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* ptr);

  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(
      const std::string& value);
  std::string* _internal_mutable_phone();

  public:
  // string avatar_url = 9;
  void clear_avatar_url() ;
  const std::string& avatar_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_url(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* ptr);

  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(
      const std::string& value);
  std::string* _internal_mutable_avatar_url();

  public:
  // int32 user_id = 1;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
    ::int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetUserInfoRequest

// int32 user_id = 1;
inline void GetUserInfoRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t GetUserInfoRequest::user_id() const {
  // @@protoc_insertion_point(field_get:user.GetUserInfoRequest.user_id)
  return _internal_user_id();
}
inline void GetUserInfoRequest::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:user.GetUserInfoRequest.user_id)
}
inline ::int32_t GetUserInfoRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline void GetUserInfoRequest::_internal_set_user_id(::int32_t value) {
  ;
  _impl_.user_id_ = value;
}

// -------------------------------------------------------------------

// GetUserInfoResponse

// bool success = 1;
inline void GetUserInfoResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GetUserInfoResponse::success() const {
  // @@protoc_insertion_point(field_get:user.GetUserInfoResponse.success)
  return _internal_success();
}
inline void GetUserInfoResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:user.GetUserInfoResponse.success)
}
inline bool GetUserInfoResponse::_internal_success() const {
  return _impl_.success_;
}
inline void GetUserInfoResponse::_internal_set_success(bool value) {
  ;
  _impl_.success_ = value;
}

// string message = 2;
inline void GetUserInfoResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetUserInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:user.GetUserInfoResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserInfoResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.GetUserInfoResponse.message)
}
inline std::string* GetUserInfoResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:user.GetUserInfoResponse.message)
  return _s;
}
inline const std::string& GetUserInfoResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GetUserInfoResponse::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserInfoResponse::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* GetUserInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:user.GetUserInfoResponse.message)
  return _impl_.message_.Release();
}
inline void GetUserInfoResponse::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.GetUserInfoResponse.message)
}

// .user.UserInfo user_info = 3;
inline bool GetUserInfoResponse::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void GetUserInfoResponse::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::user::UserInfo& GetUserInfoResponse::_internal_user_info() const {
  const ::user::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::user::UserInfo&>(
      ::user::_UserInfo_default_instance_);
}
inline const ::user::UserInfo& GetUserInfoResponse::user_info() const {
  // @@protoc_insertion_point(field_get:user.GetUserInfoResponse.user_info)
  return _internal_user_info();
}
inline void GetUserInfoResponse::unsafe_arena_set_allocated_user_info(
    ::user::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = user_info;
  if (user_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.GetUserInfoResponse.user_info)
}
inline ::user::UserInfo* GetUserInfoResponse::release_user_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::user::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::user::UserInfo* GetUserInfoResponse::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:user.GetUserInfoResponse.user_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::user::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::user::UserInfo* GetUserInfoResponse::_internal_mutable_user_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::user::UserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = p;
  }
  return _impl_.user_info_;
}
inline ::user::UserInfo* GetUserInfoResponse::mutable_user_info() {
  ::user::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:user.GetUserInfoResponse.user_info)
  return _msg;
}
inline void GetUserInfoResponse::set_allocated_user_info(::user::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:user.GetUserInfoResponse.user_info)
}

// int32 status_code = 4;
inline void GetUserInfoResponse::clear_status_code() {
  _impl_.status_code_ = 0;
}
inline ::int32_t GetUserInfoResponse::status_code() const {
  // @@protoc_insertion_point(field_get:user.GetUserInfoResponse.status_code)
  return _internal_status_code();
}
inline void GetUserInfoResponse::set_status_code(::int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:user.GetUserInfoResponse.status_code)
}
inline ::int32_t GetUserInfoResponse::_internal_status_code() const {
  return _impl_.status_code_;
}
inline void GetUserInfoResponse::_internal_set_status_code(::int32_t value) {
  ;
  _impl_.status_code_ = value;
}

// int64 timestamp = 5;
inline void GetUserInfoResponse::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t GetUserInfoResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:user.GetUserInfoResponse.timestamp)
  return _internal_timestamp();
}
inline void GetUserInfoResponse::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:user.GetUserInfoResponse.timestamp)
}
inline ::int64_t GetUserInfoResponse::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void GetUserInfoResponse::_internal_set_timestamp(::int64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// UserInfo

// int32 user_id = 1;
inline void UserInfo::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.user_id)
  return _internal_user_id();
}
inline void UserInfo::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:user.UserInfo.user_id)
}
inline ::int32_t UserInfo::_internal_user_id() const {
  return _impl_.user_id_;
}
inline void UserInfo::_internal_set_user_id(::int32_t value) {
  ;
  _impl_.user_id_ = value;
}

// string username = 2;
inline void UserInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_username(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.username)
}
inline std::string* UserInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.username)
  return _s;
}
inline const std::string& UserInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserInfo::_internal_set_username(const std::string& value) {
  ;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_username() {
  ;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:user.UserInfo.username)
  return _impl_.username_.Release();
}
inline void UserInfo::set_allocated_username(std::string* value) {
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.username)
}

// string email = 3;
inline void UserInfo::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_email(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.email)
}
inline std::string* UserInfo::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.email)
  return _s;
}
inline const std::string& UserInfo::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserInfo::_internal_set_email(const std::string& value) {
  ;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_email() {
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:user.UserInfo.email)
  return _impl_.email_.Release();
}
inline void UserInfo::set_allocated_email(std::string* value) {
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.email)
}

// string status = 4;
inline void UserInfo::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& UserInfo::status() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.status)
}
inline std::string* UserInfo::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.status)
  return _s;
}
inline const std::string& UserInfo::_internal_status() const {
  return _impl_.status_.Get();
}
inline void UserInfo::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_status() {
  // @@protoc_insertion_point(field_release:user.UserInfo.status)
  return _impl_.status_.Release();
}
inline void UserInfo::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.status)
}

// string created_at = 5;
inline void UserInfo::clear_created_at() {
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& UserInfo::created_at() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.created_at)
}
inline std::string* UserInfo::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.created_at)
  return _s;
}
inline const std::string& UserInfo::_internal_created_at() const {
  return _impl_.created_at_.Get();
}
inline void UserInfo::_internal_set_created_at(const std::string& value) {
  ;


  _impl_.created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_created_at() {
  ;
  return _impl_.created_at_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_created_at() {
  // @@protoc_insertion_point(field_release:user.UserInfo.created_at)
  return _impl_.created_at_.Release();
}
inline void UserInfo::set_allocated_created_at(std::string* value) {
  _impl_.created_at_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.created_at_.IsDefault()) {
          _impl_.created_at_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.created_at)
}

// string last_login = 6;
inline void UserInfo::clear_last_login() {
  _impl_.last_login_.ClearToEmpty();
}
inline const std::string& UserInfo::last_login() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.last_login)
  return _internal_last_login();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_last_login(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.last_login_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.last_login)
}
inline std::string* UserInfo::mutable_last_login() {
  std::string* _s = _internal_mutable_last_login();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.last_login)
  return _s;
}
inline const std::string& UserInfo::_internal_last_login() const {
  return _impl_.last_login_.Get();
}
inline void UserInfo::_internal_set_last_login(const std::string& value) {
  ;


  _impl_.last_login_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_last_login() {
  ;
  return _impl_.last_login_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_last_login() {
  // @@protoc_insertion_point(field_release:user.UserInfo.last_login)
  return _impl_.last_login_.Release();
}
inline void UserInfo::set_allocated_last_login(std::string* value) {
  _impl_.last_login_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_login_.IsDefault()) {
          _impl_.last_login_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.last_login)
}

// string full_name = 7;
inline void UserInfo::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
}
inline const std::string& UserInfo::full_name() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.full_name)
  return _internal_full_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_full_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.full_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.full_name)
}
inline std::string* UserInfo::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.full_name)
  return _s;
}
inline const std::string& UserInfo::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void UserInfo::_internal_set_full_name(const std::string& value) {
  ;


  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_full_name() {
  ;
  return _impl_.full_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_full_name() {
  // @@protoc_insertion_point(field_release:user.UserInfo.full_name)
  return _impl_.full_name_.Release();
}
inline void UserInfo::set_allocated_full_name(std::string* value) {
  _impl_.full_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.full_name_.IsDefault()) {
          _impl_.full_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.full_name)
}

// string phone = 8;
inline void UserInfo::clear_phone() {
  _impl_.phone_.ClearToEmpty();
}
inline const std::string& UserInfo::phone() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.phone)
  return _internal_phone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_phone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.phone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.phone)
}
inline std::string* UserInfo::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.phone)
  return _s;
}
inline const std::string& UserInfo::_internal_phone() const {
  return _impl_.phone_.Get();
}
inline void UserInfo::_internal_set_phone(const std::string& value) {
  ;


  _impl_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_phone() {
  ;
  return _impl_.phone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_phone() {
  // @@protoc_insertion_point(field_release:user.UserInfo.phone)
  return _impl_.phone_.Release();
}
inline void UserInfo::set_allocated_phone(std::string* value) {
  _impl_.phone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_.IsDefault()) {
          _impl_.phone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.phone)
}

// string avatar_url = 9;
inline void UserInfo::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
}
inline const std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:user.UserInfo.avatar_url)
  return _internal_avatar_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserInfo::set_avatar_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.avatar_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserInfo.avatar_url)
}
inline std::string* UserInfo::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:user.UserInfo.avatar_url)
  return _s;
}
inline const std::string& UserInfo::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void UserInfo::_internal_set_avatar_url(const std::string& value) {
  ;


  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_avatar_url() {
  ;
  return _impl_.avatar_url_.Mutable( GetArenaForAllocation());
}
inline std::string* UserInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:user.UserInfo.avatar_url)
  return _impl_.avatar_url_.Release();
}
inline void UserInfo::set_allocated_avatar_url(std::string* value) {
  _impl_.avatar_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_url_.IsDefault()) {
          _impl_.avatar_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserInfo.avatar_url)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace user


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_user_2eproto_2epb_2eh
