// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace user {

static const char* UserService_method_names[] = {
  "/user.UserService/GetUserInfo",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetUserInfo_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::GetUserInfo(::grpc::ClientContext* context, const ::user::GetUserInfoRequest& request, ::user::GetUserInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::GetUserInfoRequest, ::user::GetUserInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserInfo_, context, request, response);
}

void UserService::Stub::async::GetUserInfo(::grpc::ClientContext* context, const ::user::GetUserInfoRequest* request, ::user::GetUserInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::GetUserInfoRequest, ::user::GetUserInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserInfo_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetUserInfo(::grpc::ClientContext* context, const ::user::GetUserInfoRequest* request, ::user::GetUserInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::GetUserInfoResponse>* UserService::Stub::PrepareAsyncGetUserInfoRaw(::grpc::ClientContext* context, const ::user::GetUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::GetUserInfoResponse, ::user::GetUserInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::GetUserInfoResponse>* UserService::Stub::AsyncGetUserInfoRaw(::grpc::ClientContext* context, const ::user::GetUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::GetUserInfoRequest, ::user::GetUserInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::GetUserInfoRequest* req,
             ::user::GetUserInfoResponse* resp) {
               return service->GetUserInfo(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::GetUserInfo(::grpc::ServerContext* context, const ::user::GetUserInfoRequest* request, ::user::GetUserInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user

